// Prisma schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("NUXT_DB_CONNECTION_STRING")
}

// "Enum" tables

model Collector {
  id               Int                @id
  collector        String
  is_ip_collector  Boolean
  CollectionResult CollectionResult[]

  @@map("collector")
}

model ClassificationCategory {
  id                           Int                            @id
  category                     String
  ClassifierType               ClassifierType[]
  ClassificationCategoryResult ClassificationCategoryResult[]

  @@map("classification_category")
}

model ClassifierType {
  id               Int                    @id
  category_id      Int
  classifier       String
  category         ClassificationCategory @relation(fields: [category_id], references: [id])
  ClassifierOutput ClassifierOutput[]

  @@map("classifier_type")
}

model CollectorStatusType {
  status_code      Int                @id
  name             String
  description      String?
  CollectionResult CollectionResult[]

  @@map("collector_status_type")
}

// Models

model DomainsInput {
  id            Int      @id @default(autoincrement())
  domain        String
  first_seen    DateTime
  last_seen     DateTime
  filter_output Json?

  @@map("domains_input")
}

model Domain {
  id                    Int                            @id @default(autoincrement())
  domain_name           String                         @unique
  aggregate_probability Float?
  aggregate_description String?
  classificationResults ClassificationCategoryResult[]
  collectionResults     CollectionResult[]
  ipAddresses           IP[]
  last_update           DateTime

  @@map("domain")
}

model IP {
  id                       Int                   @id @default(autoincrement())
  ip                       String @unique
  geo_country_code         String?
  geo_region               String?
  geo_region_code          String?
  geo_city                 String?
  geo_postal_code          String?
  geo_latitude             Float?
  geo_longitude            Float?
  geo_timezone             String?
  asn                      Int?
  as_org                   String?
  network_address          String?
  network_prefix_length    Int?
  nerd_reputation          Float?
  geo_asn_update_timestamp DateTime?
  nerd_update_timestamp    DateTime?
  domain                   Domain                @relation(fields: [domain_id], references: [id])
  domain_id                Int @unique
  collectionResults        CollectionResult[]
  qradarOffenseSource      QRadarOffenseSource[]

  @@map("ip")
}

model ClassificationCategoryResult {
  id                Int                    @id @default(autoincrement())
  timestamp         DateTime
  category          ClassificationCategory @relation(fields: [category_id], references: [id])
  category_id       Int
  probability       Float
  description       String?
  details           Json?
  domain            Domain                 @relation(fields: [domain_id], references: [id])
  domain_id         Int
  classifierOutputs ClassifierOutput[]

  @@map("classification_category_result")
}

model ClassifierOutput {
  classifier      ClassifierType               @relation(fields: [classifier_id], references: [id])
  classifier_id   Int
  probability     Float
  additional_info String?
  categoryResult  ClassificationCategoryResult @relation(fields: [result_id], references: [id])
  result_id       Int

  @@id([classifier_id, result_id])
  @@map("classifier_output")
}

model CollectionResult {
  id          Int                 @id @default(autoincrement())
  source      Collector           @relation(fields: [source_id], references: [id])
  source_id   Int
  status_code Int
  status      CollectorStatusType @relation(fields: [status_code], references: [status_code])
  error       String?
  timestamp   DateTime
  raw_data    Json?
  domain      Domain              @relation(fields: [domain_id], references: [id])
  domain_id   Int
  ip          IP?                 @relation(fields: [ip_id], references: [id])
  ip_id       Int?

  @@map("collection_result")
}

// QRadar

model QRadarOffenseSource {
  id               BigInt  @id @default(autoincrement())
  ip               String? @db.Inet
  qradar_domain_id Int
  magnitude        Float

  offenses QRadarOffenseInSource[]
  IP       IP?                     @relation(fields: [ip], references: [ip])

  @@map("qradar_offense_source")
}

model QRadarOffense {
  id                BigInt   @id @default(autoincrement())
  description       String?
  event_count       Int      @default(0)
  flow_count        Int      @default(0)
  device_count      Int      @default(0)
  severity          Float
  magnitude         Float
  last_updated_time DateTime @db.Timestamptz
  status            String?

  sources QRadarOffenseInSource[]

  @@map("qradar_offense")
}

model QRadarOffenseInSource {
  offense_source_id BigInt
  offense_id        BigInt

  offense_source QRadarOffenseSource @relation(fields: [offense_source_id], references: [id], onDelete: Cascade)
  offense        QRadarOffense       @relation(fields: [offense_id], references: [id], onDelete: Cascade)

  @@id([offense_id, offense_source_id])
  @@map("qradar_offense_in_source")
}

// Custom prefilter tables

model CustomPrefilter {
  id          Int                       @id @default(autoincrement())
  name        String
  description String?
  enabled     Boolean                   @default(true)
  action      Int                       @default(0)
  domains     CustomPrefilteredDomain[]

  @@map("custom_prefilter")
}

model CustomPrefilteredDomain {
  customPrefilter     CustomPrefilter @relation(fields: [custom_prefilter_id], references: [id])
  custom_prefilter_id Int
  domain_name         String

  @@id([custom_prefilter_id, domain_name])
  @@map("custom_prefiltered_domain")
}
